
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Cliente
 * 
 */
export type Cliente = {
  id: number
  nomeCliente: string
  cpf: number
  rg: number
  email: string
  endereco: string
  numero: number
  bairro: string
  cidade: string
  estado: string
  telefone: number | null
}

/**
 * Model Restaurante
 * 
 */
export type Restaurante = {
  id: number
  razao_social: string
  nome_fantazia: string | null
  cnpj: number
  ie: number
  endereco: string
  numero: number
  bairro: string
  cidade: string
  proprietario: string
  cpf: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  usuario: string
  Senha: number
}

/**
 * Model Carrinho
 * 
 */
export type Carrinho = {
  id: number
  descricao: string
  quantidade: number
  preco: number
  imagem: string
}

/**
 * Model Reifeicao
 * 
 */
export type Reifeicao = {
  id: number
  descricao: string
  qntd: number
  preco: number
  opcionais: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<GlobalReject>;

  /**
   * `prisma.restaurante`: Exposes CRUD operations for the **Restaurante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restaurantes
    * const restaurantes = await prisma.restaurante.findMany()
    * ```
    */
  get restaurante(): Prisma.RestauranteDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.carrinho`: Exposes CRUD operations for the **Carrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carrinhos
    * const carrinhos = await prisma.carrinho.findMany()
    * ```
    */
  get carrinho(): Prisma.CarrinhoDelegate<GlobalReject>;

  /**
   * `prisma.reifeicao`: Exposes CRUD operations for the **Reifeicao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reifeicaos
    * const reifeicaos = await prisma.reifeicao.findMany()
    * ```
    */
  get reifeicao(): Prisma.ReifeicaoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Cliente: 'Cliente',
    Restaurante: 'Restaurante',
    User: 'User',
    Carrinho: 'Carrinho',
    Reifeicao: 'Reifeicao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
    cpf: number | null
    rg: number | null
    numero: number | null
    telefone: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
    cpf: number | null
    rg: number | null
    numero: number | null
    telefone: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nomeCliente: string | null
    cpf: number | null
    rg: number | null
    email: string | null
    endereco: string | null
    numero: number | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    telefone: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nomeCliente: string | null
    cpf: number | null
    rg: number | null
    email: string | null
    endereco: string | null
    numero: number | null
    bairro: string | null
    cidade: string | null
    estado: string | null
    telefone: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nomeCliente: number
    cpf: number
    rg: number
    email: number
    endereco: number
    numero: number
    bairro: number
    cidade: number
    estado: number
    telefone: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
    cpf?: true
    rg?: true
    numero?: true
    telefone?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
    cpf?: true
    rg?: true
    numero?: true
    telefone?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nomeCliente?: true
    cpf?: true
    rg?: true
    email?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    telefone?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nomeCliente?: true
    cpf?: true
    rg?: true
    email?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    telefone?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nomeCliente?: true
    cpf?: true
    rg?: true
    email?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    estado?: true
    telefone?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which Cliente to aggregate.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: ClienteWhereInput
    orderBy?: Enumerable<ClienteOrderByWithAggregationInput>
    by: Array<ClienteScalarFieldEnum>
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    id: number
    nomeCliente: string
    cpf: number
    rg: number
    email: string
    endereco: string
    numero: number
    bairro: string
    cidade: string
    estado: string
    telefone: number | null
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect = {
    id?: boolean
    nomeCliente?: boolean
    cpf?: boolean
    rg?: boolean
    email?: boolean
    endereco?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    telefone?: boolean
  }

  export type ClienteGetPayload<
    S extends boolean | null | undefined | ClienteArgs,
    U = keyof S
      > = S extends true
        ? Cliente
    : S extends undefined
    ? never
    : S extends ClienteArgs | ClienteFindManyArgs
    ?'include' extends U
    ? Cliente 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Cliente ? Cliente[P] : never
  } 
    : Cliente
  : Cliente


  type ClienteCountArgs = Merge<
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }
  >

  export interface ClienteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cliente'> extends True ? CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>> : CheckSelect<T, Prisma__ClienteClient<Cliente | null >, Prisma__ClienteClient<ClienteGetPayload<T> | null >>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cliente'> extends True ? CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>> : CheckSelect<T, Prisma__ClienteClient<Cliente | null >, Prisma__ClienteClient<ClienteGetPayload<T> | null >>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs>(
      args?: SelectSubset<T, ClienteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cliente>>, PrismaPromise<Array<ClienteGetPayload<T>>>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs>(
      args: SelectSubset<T, ClienteCreateArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs>(
      args?: SelectSubset<T, ClienteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs>(
      args: SelectSubset<T, ClienteDeleteArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs>(
      args: SelectSubset<T, ClienteUpdateArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs>(
      args?: SelectSubset<T, ClienteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs>(
      args: SelectSubset<T, ClienteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs>(
      args: SelectSubset<T, ClienteUpsertArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Find one Cliente that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClienteClient<Cliente>, Prisma__ClienteClient<ClienteGetPayload<T>>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cliente base type for findUnique actions
   */
  export type ClienteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente: findUnique
   */
  export interface ClienteFindUniqueArgs extends ClienteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente base type for findFirst actions
   */
  export type ClienteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Filter, which Cliente to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     * 
    **/
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * Cliente: findFirst
   */
  export interface ClienteFindFirstArgs extends ClienteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     * 
    **/
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * The data needed to create a Cliente.
     * 
    **/
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs = {
    /**
     * The data used to create many Clientes.
     * 
    **/
    data: Enumerable<ClienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * The data needed to update a Cliente.
     * 
    **/
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs = {
    /**
     * The data used to update Clientes.
     * 
    **/
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     * 
    **/
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     * 
    **/
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
    /**
     * Filter which Cliente to delete.
     * 
    **/
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs = {
    /**
     * Filter which Clientes to delete
     * 
    **/
    where?: ClienteWhereInput
  }


  /**
   * Cliente: findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs = ClienteFindUniqueArgsBase
      

  /**
   * Cliente: findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs = ClienteFindFirstArgsBase
      

  /**
   * Cliente without action
   */
  export type ClienteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     * 
    **/
    select?: ClienteSelect | null
  }



  /**
   * Model Restaurante
   */


  export type AggregateRestaurante = {
    _count: RestauranteCountAggregateOutputType | null
    _avg: RestauranteAvgAggregateOutputType | null
    _sum: RestauranteSumAggregateOutputType | null
    _min: RestauranteMinAggregateOutputType | null
    _max: RestauranteMaxAggregateOutputType | null
  }

  export type RestauranteAvgAggregateOutputType = {
    id: number | null
    cnpj: number | null
    ie: number | null
    numero: number | null
    cpf: number | null
  }

  export type RestauranteSumAggregateOutputType = {
    id: number | null
    cnpj: number | null
    ie: number | null
    numero: number | null
    cpf: number | null
  }

  export type RestauranteMinAggregateOutputType = {
    id: number | null
    razao_social: string | null
    nome_fantazia: string | null
    cnpj: number | null
    ie: number | null
    endereco: string | null
    numero: number | null
    bairro: string | null
    cidade: string | null
    proprietario: string | null
    cpf: number | null
  }

  export type RestauranteMaxAggregateOutputType = {
    id: number | null
    razao_social: string | null
    nome_fantazia: string | null
    cnpj: number | null
    ie: number | null
    endereco: string | null
    numero: number | null
    bairro: string | null
    cidade: string | null
    proprietario: string | null
    cpf: number | null
  }

  export type RestauranteCountAggregateOutputType = {
    id: number
    razao_social: number
    nome_fantazia: number
    cnpj: number
    ie: number
    endereco: number
    numero: number
    bairro: number
    cidade: number
    proprietario: number
    cpf: number
    _all: number
  }


  export type RestauranteAvgAggregateInputType = {
    id?: true
    cnpj?: true
    ie?: true
    numero?: true
    cpf?: true
  }

  export type RestauranteSumAggregateInputType = {
    id?: true
    cnpj?: true
    ie?: true
    numero?: true
    cpf?: true
  }

  export type RestauranteMinAggregateInputType = {
    id?: true
    razao_social?: true
    nome_fantazia?: true
    cnpj?: true
    ie?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    proprietario?: true
    cpf?: true
  }

  export type RestauranteMaxAggregateInputType = {
    id?: true
    razao_social?: true
    nome_fantazia?: true
    cnpj?: true
    ie?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    proprietario?: true
    cpf?: true
  }

  export type RestauranteCountAggregateInputType = {
    id?: true
    razao_social?: true
    nome_fantazia?: true
    cnpj?: true
    ie?: true
    endereco?: true
    numero?: true
    bairro?: true
    cidade?: true
    proprietario?: true
    cpf?: true
    _all?: true
  }

  export type RestauranteAggregateArgs = {
    /**
     * Filter which Restaurante to aggregate.
     * 
    **/
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     * 
    **/
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restaurantes
    **/
    _count?: true | RestauranteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestauranteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestauranteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestauranteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestauranteMaxAggregateInputType
  }

  export type GetRestauranteAggregateType<T extends RestauranteAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurante[P]>
      : GetScalarType<T[P], AggregateRestaurante[P]>
  }




  export type RestauranteGroupByArgs = {
    where?: RestauranteWhereInput
    orderBy?: Enumerable<RestauranteOrderByWithAggregationInput>
    by: Array<RestauranteScalarFieldEnum>
    having?: RestauranteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestauranteCountAggregateInputType | true
    _avg?: RestauranteAvgAggregateInputType
    _sum?: RestauranteSumAggregateInputType
    _min?: RestauranteMinAggregateInputType
    _max?: RestauranteMaxAggregateInputType
  }


  export type RestauranteGroupByOutputType = {
    id: number
    razao_social: string
    nome_fantazia: string | null
    cnpj: number
    ie: number
    endereco: string
    numero: number
    bairro: string
    cidade: string
    proprietario: string
    cpf: number
    _count: RestauranteCountAggregateOutputType | null
    _avg: RestauranteAvgAggregateOutputType | null
    _sum: RestauranteSumAggregateOutputType | null
    _min: RestauranteMinAggregateOutputType | null
    _max: RestauranteMaxAggregateOutputType | null
  }

  type GetRestauranteGroupByPayload<T extends RestauranteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RestauranteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestauranteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestauranteGroupByOutputType[P]>
            : GetScalarType<T[P], RestauranteGroupByOutputType[P]>
        }
      >
    >


  export type RestauranteSelect = {
    id?: boolean
    razao_social?: boolean
    nome_fantazia?: boolean
    cnpj?: boolean
    ie?: boolean
    endereco?: boolean
    numero?: boolean
    bairro?: boolean
    cidade?: boolean
    proprietario?: boolean
    cpf?: boolean
  }

  export type RestauranteGetPayload<
    S extends boolean | null | undefined | RestauranteArgs,
    U = keyof S
      > = S extends true
        ? Restaurante
    : S extends undefined
    ? never
    : S extends RestauranteArgs | RestauranteFindManyArgs
    ?'include' extends U
    ? Restaurante 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Restaurante ? Restaurante[P] : never
  } 
    : Restaurante
  : Restaurante


  type RestauranteCountArgs = Merge<
    Omit<RestauranteFindManyArgs, 'select' | 'include'> & {
      select?: RestauranteCountAggregateInputType | true
    }
  >

  export interface RestauranteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Restaurante that matches the filter.
     * @param {RestauranteFindUniqueArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestauranteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RestauranteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Restaurante'> extends True ? CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>> : CheckSelect<T, Prisma__RestauranteClient<Restaurante | null >, Prisma__RestauranteClient<RestauranteGetPayload<T> | null >>

    /**
     * Find the first Restaurante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindFirstArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestauranteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RestauranteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Restaurante'> extends True ? CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>> : CheckSelect<T, Prisma__RestauranteClient<Restaurante | null >, Prisma__RestauranteClient<RestauranteGetPayload<T> | null >>

    /**
     * Find zero or more Restaurantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restaurantes
     * const restaurantes = await prisma.restaurante.findMany()
     * 
     * // Get first 10 Restaurantes
     * const restaurantes = await prisma.restaurante.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restauranteWithIdOnly = await prisma.restaurante.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestauranteFindManyArgs>(
      args?: SelectSubset<T, RestauranteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Restaurante>>, PrismaPromise<Array<RestauranteGetPayload<T>>>>

    /**
     * Create a Restaurante.
     * @param {RestauranteCreateArgs} args - Arguments to create a Restaurante.
     * @example
     * // Create one Restaurante
     * const Restaurante = await prisma.restaurante.create({
     *   data: {
     *     // ... data to create a Restaurante
     *   }
     * })
     * 
    **/
    create<T extends RestauranteCreateArgs>(
      args: SelectSubset<T, RestauranteCreateArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Create many Restaurantes.
     *     @param {RestauranteCreateManyArgs} args - Arguments to create many Restaurantes.
     *     @example
     *     // Create many Restaurantes
     *     const restaurante = await prisma.restaurante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RestauranteCreateManyArgs>(
      args?: SelectSubset<T, RestauranteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Restaurante.
     * @param {RestauranteDeleteArgs} args - Arguments to delete one Restaurante.
     * @example
     * // Delete one Restaurante
     * const Restaurante = await prisma.restaurante.delete({
     *   where: {
     *     // ... filter to delete one Restaurante
     *   }
     * })
     * 
    **/
    delete<T extends RestauranteDeleteArgs>(
      args: SelectSubset<T, RestauranteDeleteArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Update one Restaurante.
     * @param {RestauranteUpdateArgs} args - Arguments to update one Restaurante.
     * @example
     * // Update one Restaurante
     * const restaurante = await prisma.restaurante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestauranteUpdateArgs>(
      args: SelectSubset<T, RestauranteUpdateArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Delete zero or more Restaurantes.
     * @param {RestauranteDeleteManyArgs} args - Arguments to filter Restaurantes to delete.
     * @example
     * // Delete a few Restaurantes
     * const { count } = await prisma.restaurante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestauranteDeleteManyArgs>(
      args?: SelectSubset<T, RestauranteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restaurantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restaurantes
     * const restaurante = await prisma.restaurante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestauranteUpdateManyArgs>(
      args: SelectSubset<T, RestauranteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Restaurante.
     * @param {RestauranteUpsertArgs} args - Arguments to update or create a Restaurante.
     * @example
     * // Update or create a Restaurante
     * const restaurante = await prisma.restaurante.upsert({
     *   create: {
     *     // ... data to create a Restaurante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restaurante we want to update
     *   }
     * })
    **/
    upsert<T extends RestauranteUpsertArgs>(
      args: SelectSubset<T, RestauranteUpsertArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Find one Restaurante that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RestauranteFindUniqueOrThrowArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestauranteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RestauranteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Find the first Restaurante that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteFindFirstOrThrowArgs} args - Arguments to find a Restaurante
     * @example
     * // Get one Restaurante
     * const restaurante = await prisma.restaurante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestauranteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RestauranteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RestauranteClient<Restaurante>, Prisma__RestauranteClient<RestauranteGetPayload<T>>>

    /**
     * Count the number of Restaurantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteCountArgs} args - Arguments to filter Restaurantes to count.
     * @example
     * // Count the number of Restaurantes
     * const count = await prisma.restaurante.count({
     *   where: {
     *     // ... the filter for the Restaurantes we want to count
     *   }
     * })
    **/
    count<T extends RestauranteCountArgs>(
      args?: Subset<T, RestauranteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestauranteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restaurante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestauranteAggregateArgs>(args: Subset<T, RestauranteAggregateArgs>): PrismaPromise<GetRestauranteAggregateType<T>>

    /**
     * Group by Restaurante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestauranteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestauranteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestauranteGroupByArgs['orderBy'] }
        : { orderBy?: RestauranteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestauranteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestauranteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Restaurante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RestauranteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Restaurante base type for findUnique actions
   */
  export type RestauranteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * Filter, which Restaurante to fetch.
     * 
    **/
    where: RestauranteWhereUniqueInput
  }

  /**
   * Restaurante: findUnique
   */
  export interface RestauranteFindUniqueArgs extends RestauranteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restaurante base type for findFirst actions
   */
  export type RestauranteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * Filter, which Restaurante to fetch.
     * 
    **/
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     * 
    **/
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restaurantes.
     * 
    **/
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restaurantes.
     * 
    **/
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }

  /**
   * Restaurante: findFirst
   */
  export interface RestauranteFindFirstArgs extends RestauranteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restaurante findMany
   */
  export type RestauranteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * Filter, which Restaurantes to fetch.
     * 
    **/
    where?: RestauranteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restaurantes to fetch.
     * 
    **/
    orderBy?: Enumerable<RestauranteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restaurantes.
     * 
    **/
    cursor?: RestauranteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restaurantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restaurantes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RestauranteScalarFieldEnum>
  }


  /**
   * Restaurante create
   */
  export type RestauranteCreateArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * The data needed to create a Restaurante.
     * 
    **/
    data: XOR<RestauranteCreateInput, RestauranteUncheckedCreateInput>
  }


  /**
   * Restaurante createMany
   */
  export type RestauranteCreateManyArgs = {
    /**
     * The data used to create many Restaurantes.
     * 
    **/
    data: Enumerable<RestauranteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Restaurante update
   */
  export type RestauranteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * The data needed to update a Restaurante.
     * 
    **/
    data: XOR<RestauranteUpdateInput, RestauranteUncheckedUpdateInput>
    /**
     * Choose, which Restaurante to update.
     * 
    **/
    where: RestauranteWhereUniqueInput
  }


  /**
   * Restaurante updateMany
   */
  export type RestauranteUpdateManyArgs = {
    /**
     * The data used to update Restaurantes.
     * 
    **/
    data: XOR<RestauranteUpdateManyMutationInput, RestauranteUncheckedUpdateManyInput>
    /**
     * Filter which Restaurantes to update
     * 
    **/
    where?: RestauranteWhereInput
  }


  /**
   * Restaurante upsert
   */
  export type RestauranteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * The filter to search for the Restaurante to update in case it exists.
     * 
    **/
    where: RestauranteWhereUniqueInput
    /**
     * In case the Restaurante found by the `where` argument doesn't exist, create a new Restaurante with this data.
     * 
    **/
    create: XOR<RestauranteCreateInput, RestauranteUncheckedCreateInput>
    /**
     * In case the Restaurante was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RestauranteUpdateInput, RestauranteUncheckedUpdateInput>
  }


  /**
   * Restaurante delete
   */
  export type RestauranteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
    /**
     * Filter which Restaurante to delete.
     * 
    **/
    where: RestauranteWhereUniqueInput
  }


  /**
   * Restaurante deleteMany
   */
  export type RestauranteDeleteManyArgs = {
    /**
     * Filter which Restaurantes to delete
     * 
    **/
    where?: RestauranteWhereInput
  }


  /**
   * Restaurante: findUniqueOrThrow
   */
  export type RestauranteFindUniqueOrThrowArgs = RestauranteFindUniqueArgsBase
      

  /**
   * Restaurante: findFirstOrThrow
   */
  export type RestauranteFindFirstOrThrowArgs = RestauranteFindFirstArgsBase
      

  /**
   * Restaurante without action
   */
  export type RestauranteArgs = {
    /**
     * Select specific fields to fetch from the Restaurante
     * 
    **/
    select?: RestauranteSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    Senha: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    Senha: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    usuario: string | null
    Senha: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    usuario: string | null
    Senha: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    usuario: number
    Senha: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    Senha?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    Senha?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    usuario?: true
    Senha?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    usuario?: true
    Senha?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    usuario?: true
    Senha?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    usuario: string
    Senha: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    usuario?: boolean
    Senha?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Carrinho
   */


  export type AggregateCarrinho = {
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  export type CarrinhoAvgAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
  }

  export type CarrinhoSumAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
  }

  export type CarrinhoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    quantidade: number | null
    preco: number | null
    imagem: string | null
  }

  export type CarrinhoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    quantidade: number | null
    preco: number | null
    imagem: string | null
  }

  export type CarrinhoCountAggregateOutputType = {
    id: number
    descricao: number
    quantidade: number
    preco: number
    imagem: number
    _all: number
  }


  export type CarrinhoAvgAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
  }

  export type CarrinhoSumAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
  }

  export type CarrinhoMinAggregateInputType = {
    id?: true
    descricao?: true
    quantidade?: true
    preco?: true
    imagem?: true
  }

  export type CarrinhoMaxAggregateInputType = {
    id?: true
    descricao?: true
    quantidade?: true
    preco?: true
    imagem?: true
  }

  export type CarrinhoCountAggregateInputType = {
    id?: true
    descricao?: true
    quantidade?: true
    preco?: true
    imagem?: true
    _all?: true
  }

  export type CarrinhoAggregateArgs = {
    /**
     * Filter which Carrinho to aggregate.
     * 
    **/
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<CarrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carrinhos
    **/
    _count?: true | CarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrinhoMaxAggregateInputType
  }

  export type GetCarrinhoAggregateType<T extends CarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrinho[P]>
      : GetScalarType<T[P], AggregateCarrinho[P]>
  }




  export type CarrinhoGroupByArgs = {
    where?: CarrinhoWhereInput
    orderBy?: Enumerable<CarrinhoOrderByWithAggregationInput>
    by: Array<CarrinhoScalarFieldEnum>
    having?: CarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrinhoCountAggregateInputType | true
    _avg?: CarrinhoAvgAggregateInputType
    _sum?: CarrinhoSumAggregateInputType
    _min?: CarrinhoMinAggregateInputType
    _max?: CarrinhoMaxAggregateInputType
  }


  export type CarrinhoGroupByOutputType = {
    id: number
    descricao: string
    quantidade: number
    preco: number
    imagem: string
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  type GetCarrinhoGroupByPayload<T extends CarrinhoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type CarrinhoSelect = {
    id?: boolean
    descricao?: boolean
    quantidade?: boolean
    preco?: boolean
    imagem?: boolean
  }

  export type CarrinhoGetPayload<
    S extends boolean | null | undefined | CarrinhoArgs,
    U = keyof S
      > = S extends true
        ? Carrinho
    : S extends undefined
    ? never
    : S extends CarrinhoArgs | CarrinhoFindManyArgs
    ?'include' extends U
    ? Carrinho 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Carrinho ? Carrinho[P] : never
  } 
    : Carrinho
  : Carrinho


  type CarrinhoCountArgs = Merge<
    Omit<CarrinhoFindManyArgs, 'select' | 'include'> & {
      select?: CarrinhoCountAggregateInputType | true
    }
  >

  export interface CarrinhoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Carrinho that matches the filter.
     * @param {CarrinhoFindUniqueArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarrinhoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarrinhoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Carrinho'> extends True ? CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>> : CheckSelect<T, Prisma__CarrinhoClient<Carrinho | null >, Prisma__CarrinhoClient<CarrinhoGetPayload<T> | null >>

    /**
     * Find the first Carrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarrinhoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarrinhoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Carrinho'> extends True ? CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>> : CheckSelect<T, Prisma__CarrinhoClient<Carrinho | null >, Prisma__CarrinhoClient<CarrinhoGetPayload<T> | null >>

    /**
     * Find zero or more Carrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carrinhos
     * const carrinhos = await prisma.carrinho.findMany()
     * 
     * // Get first 10 Carrinhos
     * const carrinhos = await prisma.carrinho.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carrinhoWithIdOnly = await prisma.carrinho.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarrinhoFindManyArgs>(
      args?: SelectSubset<T, CarrinhoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Carrinho>>, PrismaPromise<Array<CarrinhoGetPayload<T>>>>

    /**
     * Create a Carrinho.
     * @param {CarrinhoCreateArgs} args - Arguments to create a Carrinho.
     * @example
     * // Create one Carrinho
     * const Carrinho = await prisma.carrinho.create({
     *   data: {
     *     // ... data to create a Carrinho
     *   }
     * })
     * 
    **/
    create<T extends CarrinhoCreateArgs>(
      args: SelectSubset<T, CarrinhoCreateArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Create many Carrinhos.
     *     @param {CarrinhoCreateManyArgs} args - Arguments to create many Carrinhos.
     *     @example
     *     // Create many Carrinhos
     *     const carrinho = await prisma.carrinho.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarrinhoCreateManyArgs>(
      args?: SelectSubset<T, CarrinhoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Carrinho.
     * @param {CarrinhoDeleteArgs} args - Arguments to delete one Carrinho.
     * @example
     * // Delete one Carrinho
     * const Carrinho = await prisma.carrinho.delete({
     *   where: {
     *     // ... filter to delete one Carrinho
     *   }
     * })
     * 
    **/
    delete<T extends CarrinhoDeleteArgs>(
      args: SelectSubset<T, CarrinhoDeleteArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Update one Carrinho.
     * @param {CarrinhoUpdateArgs} args - Arguments to update one Carrinho.
     * @example
     * // Update one Carrinho
     * const carrinho = await prisma.carrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarrinhoUpdateArgs>(
      args: SelectSubset<T, CarrinhoUpdateArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Delete zero or more Carrinhos.
     * @param {CarrinhoDeleteManyArgs} args - Arguments to filter Carrinhos to delete.
     * @example
     * // Delete a few Carrinhos
     * const { count } = await prisma.carrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarrinhoDeleteManyArgs>(
      args?: SelectSubset<T, CarrinhoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carrinhos
     * const carrinho = await prisma.carrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarrinhoUpdateManyArgs>(
      args: SelectSubset<T, CarrinhoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrinho.
     * @param {CarrinhoUpsertArgs} args - Arguments to update or create a Carrinho.
     * @example
     * // Update or create a Carrinho
     * const carrinho = await prisma.carrinho.upsert({
     *   create: {
     *     // ... data to create a Carrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrinho we want to update
     *   }
     * })
    **/
    upsert<T extends CarrinhoUpsertArgs>(
      args: SelectSubset<T, CarrinhoUpsertArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Find one Carrinho that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CarrinhoFindUniqueOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarrinhoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarrinhoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Find the first Carrinho that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarrinhoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarrinhoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CarrinhoClient<Carrinho>, Prisma__CarrinhoClient<CarrinhoGetPayload<T>>>

    /**
     * Count the number of Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoCountArgs} args - Arguments to filter Carrinhos to count.
     * @example
     * // Count the number of Carrinhos
     * const count = await prisma.carrinho.count({
     *   where: {
     *     // ... the filter for the Carrinhos we want to count
     *   }
     * })
    **/
    count<T extends CarrinhoCountArgs>(
      args?: Subset<T, CarrinhoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrinhoAggregateArgs>(args: Subset<T, CarrinhoAggregateArgs>): PrismaPromise<GetCarrinhoAggregateType<T>>

    /**
     * Group by Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: CarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrinhoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarrinhoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Carrinho base type for findUnique actions
   */
  export type CarrinhoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * Filter, which Carrinho to fetch.
     * 
    **/
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho: findUnique
   */
  export interface CarrinhoFindUniqueArgs extends CarrinhoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carrinho base type for findFirst actions
   */
  export type CarrinhoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * Filter, which Carrinho to fetch.
     * 
    **/
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<CarrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     * 
    **/
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     * 
    **/
    distinct?: Enumerable<CarrinhoScalarFieldEnum>
  }

  /**
   * Carrinho: findFirst
   */
  export interface CarrinhoFindFirstArgs extends CarrinhoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carrinho findMany
   */
  export type CarrinhoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * Filter, which Carrinhos to fetch.
     * 
    **/
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<CarrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carrinhos.
     * 
    **/
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarrinhoScalarFieldEnum>
  }


  /**
   * Carrinho create
   */
  export type CarrinhoCreateArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * The data needed to create a Carrinho.
     * 
    **/
    data: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
  }


  /**
   * Carrinho createMany
   */
  export type CarrinhoCreateManyArgs = {
    /**
     * The data used to create many Carrinhos.
     * 
    **/
    data: Enumerable<CarrinhoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Carrinho update
   */
  export type CarrinhoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * The data needed to update a Carrinho.
     * 
    **/
    data: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
    /**
     * Choose, which Carrinho to update.
     * 
    **/
    where: CarrinhoWhereUniqueInput
  }


  /**
   * Carrinho updateMany
   */
  export type CarrinhoUpdateManyArgs = {
    /**
     * The data used to update Carrinhos.
     * 
    **/
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which Carrinhos to update
     * 
    **/
    where?: CarrinhoWhereInput
  }


  /**
   * Carrinho upsert
   */
  export type CarrinhoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * The filter to search for the Carrinho to update in case it exists.
     * 
    **/
    where: CarrinhoWhereUniqueInput
    /**
     * In case the Carrinho found by the `where` argument doesn't exist, create a new Carrinho with this data.
     * 
    **/
    create: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
    /**
     * In case the Carrinho was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
  }


  /**
   * Carrinho delete
   */
  export type CarrinhoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
    /**
     * Filter which Carrinho to delete.
     * 
    **/
    where: CarrinhoWhereUniqueInput
  }


  /**
   * Carrinho deleteMany
   */
  export type CarrinhoDeleteManyArgs = {
    /**
     * Filter which Carrinhos to delete
     * 
    **/
    where?: CarrinhoWhereInput
  }


  /**
   * Carrinho: findUniqueOrThrow
   */
  export type CarrinhoFindUniqueOrThrowArgs = CarrinhoFindUniqueArgsBase
      

  /**
   * Carrinho: findFirstOrThrow
   */
  export type CarrinhoFindFirstOrThrowArgs = CarrinhoFindFirstArgsBase
      

  /**
   * Carrinho without action
   */
  export type CarrinhoArgs = {
    /**
     * Select specific fields to fetch from the Carrinho
     * 
    **/
    select?: CarrinhoSelect | null
  }



  /**
   * Model Reifeicao
   */


  export type AggregateReifeicao = {
    _count: ReifeicaoCountAggregateOutputType | null
    _avg: ReifeicaoAvgAggregateOutputType | null
    _sum: ReifeicaoSumAggregateOutputType | null
    _min: ReifeicaoMinAggregateOutputType | null
    _max: ReifeicaoMaxAggregateOutputType | null
  }

  export type ReifeicaoAvgAggregateOutputType = {
    id: number | null
    qntd: number | null
    preco: number | null
  }

  export type ReifeicaoSumAggregateOutputType = {
    id: number | null
    qntd: number | null
    preco: number | null
  }

  export type ReifeicaoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    qntd: number | null
    preco: number | null
    opcionais: string | null
  }

  export type ReifeicaoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    qntd: number | null
    preco: number | null
    opcionais: string | null
  }

  export type ReifeicaoCountAggregateOutputType = {
    id: number
    descricao: number
    qntd: number
    preco: number
    opcionais: number
    _all: number
  }


  export type ReifeicaoAvgAggregateInputType = {
    id?: true
    qntd?: true
    preco?: true
  }

  export type ReifeicaoSumAggregateInputType = {
    id?: true
    qntd?: true
    preco?: true
  }

  export type ReifeicaoMinAggregateInputType = {
    id?: true
    descricao?: true
    qntd?: true
    preco?: true
    opcionais?: true
  }

  export type ReifeicaoMaxAggregateInputType = {
    id?: true
    descricao?: true
    qntd?: true
    preco?: true
    opcionais?: true
  }

  export type ReifeicaoCountAggregateInputType = {
    id?: true
    descricao?: true
    qntd?: true
    preco?: true
    opcionais?: true
    _all?: true
  }

  export type ReifeicaoAggregateArgs = {
    /**
     * Filter which Reifeicao to aggregate.
     * 
    **/
    where?: ReifeicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reifeicaos to fetch.
     * 
    **/
    orderBy?: Enumerable<ReifeicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReifeicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reifeicaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reifeicaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reifeicaos
    **/
    _count?: true | ReifeicaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReifeicaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReifeicaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReifeicaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReifeicaoMaxAggregateInputType
  }

  export type GetReifeicaoAggregateType<T extends ReifeicaoAggregateArgs> = {
        [P in keyof T & keyof AggregateReifeicao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReifeicao[P]>
      : GetScalarType<T[P], AggregateReifeicao[P]>
  }




  export type ReifeicaoGroupByArgs = {
    where?: ReifeicaoWhereInput
    orderBy?: Enumerable<ReifeicaoOrderByWithAggregationInput>
    by: Array<ReifeicaoScalarFieldEnum>
    having?: ReifeicaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReifeicaoCountAggregateInputType | true
    _avg?: ReifeicaoAvgAggregateInputType
    _sum?: ReifeicaoSumAggregateInputType
    _min?: ReifeicaoMinAggregateInputType
    _max?: ReifeicaoMaxAggregateInputType
  }


  export type ReifeicaoGroupByOutputType = {
    id: number
    descricao: string
    qntd: number
    preco: number
    opcionais: string | null
    _count: ReifeicaoCountAggregateOutputType | null
    _avg: ReifeicaoAvgAggregateOutputType | null
    _sum: ReifeicaoSumAggregateOutputType | null
    _min: ReifeicaoMinAggregateOutputType | null
    _max: ReifeicaoMaxAggregateOutputType | null
  }

  type GetReifeicaoGroupByPayload<T extends ReifeicaoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReifeicaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReifeicaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReifeicaoGroupByOutputType[P]>
            : GetScalarType<T[P], ReifeicaoGroupByOutputType[P]>
        }
      >
    >


  export type ReifeicaoSelect = {
    id?: boolean
    descricao?: boolean
    qntd?: boolean
    preco?: boolean
    opcionais?: boolean
  }

  export type ReifeicaoGetPayload<
    S extends boolean | null | undefined | ReifeicaoArgs,
    U = keyof S
      > = S extends true
        ? Reifeicao
    : S extends undefined
    ? never
    : S extends ReifeicaoArgs | ReifeicaoFindManyArgs
    ?'include' extends U
    ? Reifeicao 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Reifeicao ? Reifeicao[P] : never
  } 
    : Reifeicao
  : Reifeicao


  type ReifeicaoCountArgs = Merge<
    Omit<ReifeicaoFindManyArgs, 'select' | 'include'> & {
      select?: ReifeicaoCountAggregateInputType | true
    }
  >

  export interface ReifeicaoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reifeicao that matches the filter.
     * @param {ReifeicaoFindUniqueArgs} args - Arguments to find a Reifeicao
     * @example
     * // Get one Reifeicao
     * const reifeicao = await prisma.reifeicao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReifeicaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReifeicaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reifeicao'> extends True ? CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>> : CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao | null >, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T> | null >>

    /**
     * Find the first Reifeicao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoFindFirstArgs} args - Arguments to find a Reifeicao
     * @example
     * // Get one Reifeicao
     * const reifeicao = await prisma.reifeicao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReifeicaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReifeicaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reifeicao'> extends True ? CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>> : CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao | null >, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T> | null >>

    /**
     * Find zero or more Reifeicaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reifeicaos
     * const reifeicaos = await prisma.reifeicao.findMany()
     * 
     * // Get first 10 Reifeicaos
     * const reifeicaos = await prisma.reifeicao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reifeicaoWithIdOnly = await prisma.reifeicao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReifeicaoFindManyArgs>(
      args?: SelectSubset<T, ReifeicaoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reifeicao>>, PrismaPromise<Array<ReifeicaoGetPayload<T>>>>

    /**
     * Create a Reifeicao.
     * @param {ReifeicaoCreateArgs} args - Arguments to create a Reifeicao.
     * @example
     * // Create one Reifeicao
     * const Reifeicao = await prisma.reifeicao.create({
     *   data: {
     *     // ... data to create a Reifeicao
     *   }
     * })
     * 
    **/
    create<T extends ReifeicaoCreateArgs>(
      args: SelectSubset<T, ReifeicaoCreateArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Create many Reifeicaos.
     *     @param {ReifeicaoCreateManyArgs} args - Arguments to create many Reifeicaos.
     *     @example
     *     // Create many Reifeicaos
     *     const reifeicao = await prisma.reifeicao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReifeicaoCreateManyArgs>(
      args?: SelectSubset<T, ReifeicaoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reifeicao.
     * @param {ReifeicaoDeleteArgs} args - Arguments to delete one Reifeicao.
     * @example
     * // Delete one Reifeicao
     * const Reifeicao = await prisma.reifeicao.delete({
     *   where: {
     *     // ... filter to delete one Reifeicao
     *   }
     * })
     * 
    **/
    delete<T extends ReifeicaoDeleteArgs>(
      args: SelectSubset<T, ReifeicaoDeleteArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Update one Reifeicao.
     * @param {ReifeicaoUpdateArgs} args - Arguments to update one Reifeicao.
     * @example
     * // Update one Reifeicao
     * const reifeicao = await prisma.reifeicao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReifeicaoUpdateArgs>(
      args: SelectSubset<T, ReifeicaoUpdateArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Delete zero or more Reifeicaos.
     * @param {ReifeicaoDeleteManyArgs} args - Arguments to filter Reifeicaos to delete.
     * @example
     * // Delete a few Reifeicaos
     * const { count } = await prisma.reifeicao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReifeicaoDeleteManyArgs>(
      args?: SelectSubset<T, ReifeicaoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reifeicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reifeicaos
     * const reifeicao = await prisma.reifeicao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReifeicaoUpdateManyArgs>(
      args: SelectSubset<T, ReifeicaoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reifeicao.
     * @param {ReifeicaoUpsertArgs} args - Arguments to update or create a Reifeicao.
     * @example
     * // Update or create a Reifeicao
     * const reifeicao = await prisma.reifeicao.upsert({
     *   create: {
     *     // ... data to create a Reifeicao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reifeicao we want to update
     *   }
     * })
    **/
    upsert<T extends ReifeicaoUpsertArgs>(
      args: SelectSubset<T, ReifeicaoUpsertArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Find one Reifeicao that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReifeicaoFindUniqueOrThrowArgs} args - Arguments to find a Reifeicao
     * @example
     * // Get one Reifeicao
     * const reifeicao = await prisma.reifeicao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReifeicaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReifeicaoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Find the first Reifeicao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoFindFirstOrThrowArgs} args - Arguments to find a Reifeicao
     * @example
     * // Get one Reifeicao
     * const reifeicao = await prisma.reifeicao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReifeicaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReifeicaoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ReifeicaoClient<Reifeicao>, Prisma__ReifeicaoClient<ReifeicaoGetPayload<T>>>

    /**
     * Count the number of Reifeicaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoCountArgs} args - Arguments to filter Reifeicaos to count.
     * @example
     * // Count the number of Reifeicaos
     * const count = await prisma.reifeicao.count({
     *   where: {
     *     // ... the filter for the Reifeicaos we want to count
     *   }
     * })
    **/
    count<T extends ReifeicaoCountArgs>(
      args?: Subset<T, ReifeicaoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReifeicaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reifeicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReifeicaoAggregateArgs>(args: Subset<T, ReifeicaoAggregateArgs>): PrismaPromise<GetReifeicaoAggregateType<T>>

    /**
     * Group by Reifeicao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReifeicaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReifeicaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReifeicaoGroupByArgs['orderBy'] }
        : { orderBy?: ReifeicaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReifeicaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReifeicaoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reifeicao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReifeicaoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reifeicao base type for findUnique actions
   */
  export type ReifeicaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * Filter, which Reifeicao to fetch.
     * 
    **/
    where: ReifeicaoWhereUniqueInput
  }

  /**
   * Reifeicao: findUnique
   */
  export interface ReifeicaoFindUniqueArgs extends ReifeicaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reifeicao base type for findFirst actions
   */
  export type ReifeicaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * Filter, which Reifeicao to fetch.
     * 
    **/
    where?: ReifeicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reifeicaos to fetch.
     * 
    **/
    orderBy?: Enumerable<ReifeicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reifeicaos.
     * 
    **/
    cursor?: ReifeicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reifeicaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reifeicaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reifeicaos.
     * 
    **/
    distinct?: Enumerable<ReifeicaoScalarFieldEnum>
  }

  /**
   * Reifeicao: findFirst
   */
  export interface ReifeicaoFindFirstArgs extends ReifeicaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reifeicao findMany
   */
  export type ReifeicaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * Filter, which Reifeicaos to fetch.
     * 
    **/
    where?: ReifeicaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reifeicaos to fetch.
     * 
    **/
    orderBy?: Enumerable<ReifeicaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reifeicaos.
     * 
    **/
    cursor?: ReifeicaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reifeicaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reifeicaos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReifeicaoScalarFieldEnum>
  }


  /**
   * Reifeicao create
   */
  export type ReifeicaoCreateArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * The data needed to create a Reifeicao.
     * 
    **/
    data: XOR<ReifeicaoCreateInput, ReifeicaoUncheckedCreateInput>
  }


  /**
   * Reifeicao createMany
   */
  export type ReifeicaoCreateManyArgs = {
    /**
     * The data used to create many Reifeicaos.
     * 
    **/
    data: Enumerable<ReifeicaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reifeicao update
   */
  export type ReifeicaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * The data needed to update a Reifeicao.
     * 
    **/
    data: XOR<ReifeicaoUpdateInput, ReifeicaoUncheckedUpdateInput>
    /**
     * Choose, which Reifeicao to update.
     * 
    **/
    where: ReifeicaoWhereUniqueInput
  }


  /**
   * Reifeicao updateMany
   */
  export type ReifeicaoUpdateManyArgs = {
    /**
     * The data used to update Reifeicaos.
     * 
    **/
    data: XOR<ReifeicaoUpdateManyMutationInput, ReifeicaoUncheckedUpdateManyInput>
    /**
     * Filter which Reifeicaos to update
     * 
    **/
    where?: ReifeicaoWhereInput
  }


  /**
   * Reifeicao upsert
   */
  export type ReifeicaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * The filter to search for the Reifeicao to update in case it exists.
     * 
    **/
    where: ReifeicaoWhereUniqueInput
    /**
     * In case the Reifeicao found by the `where` argument doesn't exist, create a new Reifeicao with this data.
     * 
    **/
    create: XOR<ReifeicaoCreateInput, ReifeicaoUncheckedCreateInput>
    /**
     * In case the Reifeicao was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReifeicaoUpdateInput, ReifeicaoUncheckedUpdateInput>
  }


  /**
   * Reifeicao delete
   */
  export type ReifeicaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
    /**
     * Filter which Reifeicao to delete.
     * 
    **/
    where: ReifeicaoWhereUniqueInput
  }


  /**
   * Reifeicao deleteMany
   */
  export type ReifeicaoDeleteManyArgs = {
    /**
     * Filter which Reifeicaos to delete
     * 
    **/
    where?: ReifeicaoWhereInput
  }


  /**
   * Reifeicao: findUniqueOrThrow
   */
  export type ReifeicaoFindUniqueOrThrowArgs = ReifeicaoFindUniqueArgsBase
      

  /**
   * Reifeicao: findFirstOrThrow
   */
  export type ReifeicaoFindFirstOrThrowArgs = ReifeicaoFindFirstArgsBase
      

  /**
   * Reifeicao without action
   */
  export type ReifeicaoArgs = {
    /**
     * Select specific fields to fetch from the Reifeicao
     * 
    **/
    select?: ReifeicaoSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CarrinhoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    quantidade: 'quantidade',
    preco: 'preco',
    imagem: 'imagem'
  };

  export type CarrinhoScalarFieldEnum = (typeof CarrinhoScalarFieldEnum)[keyof typeof CarrinhoScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nomeCliente: 'nomeCliente',
    cpf: 'cpf',
    rg: 'rg',
    email: 'email',
    endereco: 'endereco',
    numero: 'numero',
    bairro: 'bairro',
    cidade: 'cidade',
    estado: 'estado',
    telefone: 'telefone'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ReifeicaoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    qntd: 'qntd',
    preco: 'preco',
    opcionais: 'opcionais'
  };

  export type ReifeicaoScalarFieldEnum = (typeof ReifeicaoScalarFieldEnum)[keyof typeof ReifeicaoScalarFieldEnum]


  export const RestauranteScalarFieldEnum: {
    id: 'id',
    razao_social: 'razao_social',
    nome_fantazia: 'nome_fantazia',
    cnpj: 'cnpj',
    ie: 'ie',
    endereco: 'endereco',
    numero: 'numero',
    bairro: 'bairro',
    cidade: 'cidade',
    proprietario: 'proprietario',
    cpf: 'cpf'
  };

  export type RestauranteScalarFieldEnum = (typeof RestauranteScalarFieldEnum)[keyof typeof RestauranteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    usuario: 'usuario',
    Senha: 'Senha'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: Enumerable<ClienteWhereInput>
    OR?: Enumerable<ClienteWhereInput>
    NOT?: Enumerable<ClienteWhereInput>
    id?: IntFilter | number
    nomeCliente?: StringFilter | string
    cpf?: IntFilter | number
    rg?: IntFilter | number
    email?: StringFilter | string
    endereco?: StringFilter | string
    numero?: IntFilter | number
    bairro?: StringFilter | string
    cidade?: StringFilter | string
    estado?: StringFilter | string
    telefone?: IntNullableFilter | number | null
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nomeCliente?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteWhereUniqueInput = {
    id?: number
    nomeCliente?: string
    cpf?: number
    rg?: number
    email?: string
    endereco?: string
    numero?: number
    bairro?: string
    cidade?: string
    estado?: string
  }

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nomeCliente?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    telefone?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nomeCliente?: StringWithAggregatesFilter | string
    cpf?: IntWithAggregatesFilter | number
    rg?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
    numero?: IntWithAggregatesFilter | number
    bairro?: StringWithAggregatesFilter | string
    cidade?: StringWithAggregatesFilter | string
    estado?: StringWithAggregatesFilter | string
    telefone?: IntNullableWithAggregatesFilter | number | null
  }

  export type RestauranteWhereInput = {
    AND?: Enumerable<RestauranteWhereInput>
    OR?: Enumerable<RestauranteWhereInput>
    NOT?: Enumerable<RestauranteWhereInput>
    id?: IntFilter | number
    razao_social?: StringFilter | string
    nome_fantazia?: StringNullableFilter | string | null
    cnpj?: IntFilter | number
    ie?: IntFilter | number
    endereco?: StringFilter | string
    numero?: IntFilter | number
    bairro?: StringFilter | string
    cidade?: StringFilter | string
    proprietario?: StringFilter | string
    cpf?: IntFilter | number
  }

  export type RestauranteOrderByWithRelationInput = {
    id?: SortOrder
    razao_social?: SortOrder
    nome_fantazia?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    proprietario?: SortOrder
    cpf?: SortOrder
  }

  export type RestauranteWhereUniqueInput = {
    id?: number
    razao_social?: string
    cnpj?: number
    ie?: number
    endereco?: string
    numero?: number
    bairro?: string
    cidade?: string
    proprietario?: string
    cpf?: number
  }

  export type RestauranteOrderByWithAggregationInput = {
    id?: SortOrder
    razao_social?: SortOrder
    nome_fantazia?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    proprietario?: SortOrder
    cpf?: SortOrder
    _count?: RestauranteCountOrderByAggregateInput
    _avg?: RestauranteAvgOrderByAggregateInput
    _max?: RestauranteMaxOrderByAggregateInput
    _min?: RestauranteMinOrderByAggregateInput
    _sum?: RestauranteSumOrderByAggregateInput
  }

  export type RestauranteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    OR?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RestauranteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    razao_social?: StringWithAggregatesFilter | string
    nome_fantazia?: StringNullableWithAggregatesFilter | string | null
    cnpj?: IntWithAggregatesFilter | number
    ie?: IntWithAggregatesFilter | number
    endereco?: StringWithAggregatesFilter | string
    numero?: IntWithAggregatesFilter | number
    bairro?: StringWithAggregatesFilter | string
    cidade?: StringWithAggregatesFilter | string
    proprietario?: StringWithAggregatesFilter | string
    cpf?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    usuario?: StringFilter | string
    Senha?: IntFilter | number
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    usuario?: SortOrder
    Senha?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    usuario?: string
    Senha?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    usuario?: SortOrder
    Senha?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    usuario?: StringWithAggregatesFilter | string
    Senha?: IntWithAggregatesFilter | number
  }

  export type CarrinhoWhereInput = {
    AND?: Enumerable<CarrinhoWhereInput>
    OR?: Enumerable<CarrinhoWhereInput>
    NOT?: Enumerable<CarrinhoWhereInput>
    id?: IntFilter | number
    descricao?: StringFilter | string
    quantidade?: IntFilter | number
    preco?: IntFilter | number
    imagem?: StringFilter | string
  }

  export type CarrinhoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
  }

  export type CarrinhoWhereUniqueInput = {
    id?: number
    descricao?: string
    quantidade?: number
    preco?: number
    imagem?: string
  }

  export type CarrinhoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    _count?: CarrinhoCountOrderByAggregateInput
    _avg?: CarrinhoAvgOrderByAggregateInput
    _max?: CarrinhoMaxOrderByAggregateInput
    _min?: CarrinhoMinOrderByAggregateInput
    _sum?: CarrinhoSumOrderByAggregateInput
  }

  export type CarrinhoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarrinhoScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarrinhoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarrinhoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    quantidade?: IntWithAggregatesFilter | number
    preco?: IntWithAggregatesFilter | number
    imagem?: StringWithAggregatesFilter | string
  }

  export type ReifeicaoWhereInput = {
    AND?: Enumerable<ReifeicaoWhereInput>
    OR?: Enumerable<ReifeicaoWhereInput>
    NOT?: Enumerable<ReifeicaoWhereInput>
    id?: IntFilter | number
    descricao?: StringFilter | string
    qntd?: IntFilter | number
    preco?: FloatFilter | number
    opcionais?: StringNullableFilter | string | null
  }

  export type ReifeicaoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
    opcionais?: SortOrder
  }

  export type ReifeicaoWhereUniqueInput = {
    id?: number
    descricao?: string
    qntd?: number
    preco?: number
  }

  export type ReifeicaoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
    opcionais?: SortOrder
    _count?: ReifeicaoCountOrderByAggregateInput
    _avg?: ReifeicaoAvgOrderByAggregateInput
    _max?: ReifeicaoMaxOrderByAggregateInput
    _min?: ReifeicaoMinOrderByAggregateInput
    _sum?: ReifeicaoSumOrderByAggregateInput
  }

  export type ReifeicaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReifeicaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReifeicaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReifeicaoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    qntd?: IntWithAggregatesFilter | number
    preco?: FloatWithAggregatesFilter | number
    opcionais?: StringNullableWithAggregatesFilter | string | null
  }

  export type ClienteCreateInput = {
    nomeCliente: string
    cpf: number
    rg: number
    email: string
    endereco: string
    numero: number
    bairro: string
    cidade: string
    estado: string
    telefone?: number | null
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nomeCliente: string
    cpf: number
    rg: number
    email: string
    endereco: string
    numero: number
    bairro: string
    cidade: string
    estado: string
    telefone?: number | null
  }

  export type ClienteUpdateInput = {
    nomeCliente?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    telefone?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCliente?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    telefone?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClienteCreateManyInput = {
    id?: number
    nomeCliente: string
    cpf: number
    rg: number
    email: string
    endereco: string
    numero: number
    bairro: string
    cidade: string
    estado: string
    telefone?: number | null
  }

  export type ClienteUpdateManyMutationInput = {
    nomeCliente?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    telefone?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeCliente?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
    rg?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    telefone?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RestauranteCreateInput = {
    razao_social: string
    nome_fantazia?: string | null
    cnpj: number
    ie: number
    endereco: string
    numero: number
    bairro: string
    cidade: string
    proprietario: string
    cpf: number
  }

  export type RestauranteUncheckedCreateInput = {
    id?: number
    razao_social: string
    nome_fantazia?: string | null
    cnpj: number
    ie: number
    endereco: string
    numero: number
    bairro: string
    cidade: string
    proprietario: string
    cpf: number
  }

  export type RestauranteUpdateInput = {
    razao_social?: StringFieldUpdateOperationsInput | string
    nome_fantazia?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: IntFieldUpdateOperationsInput | number
    ie?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    proprietario?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
  }

  export type RestauranteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    nome_fantazia?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: IntFieldUpdateOperationsInput | number
    ie?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    proprietario?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
  }

  export type RestauranteCreateManyInput = {
    id?: number
    razao_social: string
    nome_fantazia?: string | null
    cnpj: number
    ie: number
    endereco: string
    numero: number
    bairro: string
    cidade: string
    proprietario: string
    cpf: number
  }

  export type RestauranteUpdateManyMutationInput = {
    razao_social?: StringFieldUpdateOperationsInput | string
    nome_fantazia?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: IntFieldUpdateOperationsInput | number
    ie?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    proprietario?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
  }

  export type RestauranteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    nome_fantazia?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: IntFieldUpdateOperationsInput | number
    ie?: IntFieldUpdateOperationsInput | number
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    proprietario?: StringFieldUpdateOperationsInput | string
    cpf?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    usuario: string
    Senha: number
  }

  export type UserUncheckedCreateInput = {
    id?: number
    usuario: string
    Senha: number
  }

  export type UserUpdateInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    Senha?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    Senha?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyInput = {
    id?: number
    usuario: string
    Senha: number
  }

  export type UserUpdateManyMutationInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    Senha?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    Senha?: IntFieldUpdateOperationsInput | number
  }

  export type CarrinhoCreateInput = {
    descricao: string
    quantidade: number
    preco: number
    imagem: string
  }

  export type CarrinhoUncheckedCreateInput = {
    id?: number
    descricao: string
    quantidade: number
    preco: number
    imagem: string
  }

  export type CarrinhoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: IntFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CarrinhoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: IntFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CarrinhoCreateManyInput = {
    id?: number
    descricao: string
    quantidade: number
    preco: number
    imagem: string
  }

  export type CarrinhoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: IntFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type CarrinhoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: IntFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type ReifeicaoCreateInput = {
    descricao: string
    qntd: number
    preco: number
    opcionais?: string | null
  }

  export type ReifeicaoUncheckedCreateInput = {
    id?: number
    descricao: string
    qntd: number
    preco: number
    opcionais?: string | null
  }

  export type ReifeicaoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    qntd?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    opcionais?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReifeicaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    qntd?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    opcionais?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReifeicaoCreateManyInput = {
    id?: number
    descricao: string
    qntd: number
    preco: number
    opcionais?: string | null
  }

  export type ReifeicaoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    qntd?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    opcionais?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReifeicaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    qntd?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    opcionais?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nomeCliente?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    numero?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeCliente?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nomeCliente?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    email?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    numero?: SortOrder
    telefone?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type RestauranteCountOrderByAggregateInput = {
    id?: SortOrder
    razao_social?: SortOrder
    nome_fantazia?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    proprietario?: SortOrder
    cpf?: SortOrder
  }

  export type RestauranteAvgOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    numero?: SortOrder
    cpf?: SortOrder
  }

  export type RestauranteMaxOrderByAggregateInput = {
    id?: SortOrder
    razao_social?: SortOrder
    nome_fantazia?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    proprietario?: SortOrder
    cpf?: SortOrder
  }

  export type RestauranteMinOrderByAggregateInput = {
    id?: SortOrder
    razao_social?: SortOrder
    nome_fantazia?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    proprietario?: SortOrder
    cpf?: SortOrder
  }

  export type RestauranteSumOrderByAggregateInput = {
    id?: SortOrder
    cnpj?: SortOrder
    ie?: SortOrder
    numero?: SortOrder
    cpf?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    Senha?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    Senha?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    Senha?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    Senha?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    Senha?: SortOrder
  }

  export type CarrinhoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
  }

  export type CarrinhoAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
  }

  export type CarrinhoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
  }

  export type CarrinhoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
  }

  export type CarrinhoSumOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ReifeicaoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
    opcionais?: SortOrder
  }

  export type ReifeicaoAvgOrderByAggregateInput = {
    id?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
  }

  export type ReifeicaoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
    opcionais?: SortOrder
  }

  export type ReifeicaoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
    opcionais?: SortOrder
  }

  export type ReifeicaoSumOrderByAggregateInput = {
    id?: SortOrder
    qntd?: SortOrder
    preco?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}